What happens when you initialize a repository? Why do you need to do it?

	A new system subdirectory is created to hold the metadata needed for the 
	repository. The repository begins without any commits. This is needed so 
	that git has a place to record the contents and history of the new 
	repository.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The staging area is a logical entity. That makes it different from the working 
	directory, which is a physical directory. The working directory physically 
	stores the hidden repository metadata (.git/...), the latest version of files 
	that have been added to the repository (versions that may or may not have been 
	committed yet), and any unlinked files that happen to be kept in the same 
	directory. The unlinked files may or may not be related to the repository's 
	project, but they are not officially part of the repository until they are 
	explicitly added to it.

	The repository, which is defined by the metadata stored in the .git/ 
	subdirectory of the working directory, is also a physical entity, though it's 
	a little more complex than a physical directory: the repository is made up of 
	(1) all the files that are both in the working directory and have been "add"ed 
	to the repository's metadata, along with (2) the system files stored in .git/, 
	which store the information that defines the present state and working history 
	of all the contents of the repository.

	The value of this logical entity called the staging area is that it lets us think 
	of all things that have changed since the last commit as being "parked" in a 
	"place" and waiting to be actively included in the project history. We can scan 
	the staging area to see what changes belong together in andother logical entity, 
	the next commit.


How can you use the staging area to make sure you have one commit per logical
change?

	As you work on an issue (bug, new feature, or whatever), you should be sure 
	to add each file you modfy to the staging area, as the first change is 
	stored. As the logical unit is completed, a quick status will remind you 
	which files have been touched. Before moving on to the next logical unit 
	of change, a commit should be made, documenting the changes that were made 
	and why they were done.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
