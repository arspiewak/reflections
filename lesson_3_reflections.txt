When would you want to use a remote repository rather than keeping all your work
local?

    I would use a remote repository when there needs to be access to a related set of 
    project files across a number of different computers. Examples are: if I'm working 
    with collaborators, if I'm working across different systems (a back-end server and a 
    different front-end client), projects that must work on different client operating 
    systems, or projects where I work on different computers at different times (at 
    home, at work, on the road). Storing my repository "in the cloud" can also be a way
    of assuring a secure and functionally consistent backup (made at a commit boundary), 
    in case my computer is damaged or lost.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    Only I know how my remote repository is being used and what I expect to find there. 
    If it's a group project, I don't know what changes someone else may make, and how 
    they'll affect my work. I want my local copy of the code to stay stable until I 
    reach a point where I am ready to merge others' work in. If I'm working on my own, 
    the best way to move changes depends on what I'm doing. Different projects have 
    different operating needs. Only the developer(s) will know what's needed, so a 
    generic automatic  push would be a bad idea.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    What all three things - forks, clones, and branches - have in common is 
    that they are all independent versions of the contents of a repository. 

    Forks and clones are complete copies of all the repository - its files and 
    history, which records all its branches and commits. A clone is a complete 
    copy that is created in another place, either on a remote or on the local 
    computer. A fork is a special kind of clone: it is a clone of a remote 
    repository that stays on the remote repository. Typically, a clone is used 
    when the two versions of the repository might be kept in sync (the original 
    copy is kept as a remote). A fork is used when the copies are going to be 
    independent.

    Branches are similar: all the files in a repository exist in both branches 
    when a new branch is created, and files may then be changed to different 
    versions between the branches. But two branches exist within the same 
    repository and share a working directory. Branches can be merged together, 
    where clones and forks cannot (at least not with a simple merge command). 
    When a repository is forked or cloned, all branches inside it are copied. 
    Branches are used within the same repository, often to allow independent 
    changes to proceed at the same time, to be merged into one version at a 
    later time.

    Of course, after a repository is forked OR cloned the two copies may be 
    updated separately. We have learned how to keep cloned repositories in 
    sync after they split, using push and pull commands. We don't know yet 
    about whether/how forked copies can be synced.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    It's a local note about how many (and which) changes you have committed 
    since you last synced with the remote. That helps you track where you are 
    in terms of communicating what you are doing with other collaborators or 
    platforms. You can track a set of commits that form a logically consistent 
    whole "mini-release."

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    Fill in your answer here

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    Fill in your answer here
