When would you want to use a remote repository rather than keeping all your work
local?

    I would use a remote repository when there needs to be access to a related set of 
    project files across a number of different computers. Examples are: if I'm working 
    with collaborators, if I'm working across different systems (a back-end server and a 
    different front-end client), projects that must work on different client operating 
    systems, or projects where I work on different computers at different times (at 
    home, at work, on the road). Storing my repository "in the cloud" can also be a way
    of assuring a secure and functionally consistent backup (made at a commit boundary), 
    in case my computer is damaged or lost.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    Only I know how my remote repository is being used and what I expect to find there. 
    If it's a group project, I don't know what changes someone else may make, and how 
    they'll affect my work. I want my local copy of the code to stay stable until I 
    reach a point where I am ready to merge others' work in. If I'm working on my own, 
    the best way to move changes depends on what I'm doing. Different projects have 
    different operating needs. Only the developer(s) will know what's needed, so a 
    generic automatic  push would be a bad idea.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    What all three things - forks, clones, and branches - have in common is 
    that they are all independent versions of the contents of a repository. 

    Forks and clones are complete copies of all the repository - its files and 
    history, which records all its branches and commits. A clone is a complete 
    copy that is created in another place, either on a remote or on the local 
    computer. A fork is a special kind of clone: it is a clone of a remote 
    repository that stays on the remote repository. Typically, a clone is used 
    when the two versions of the repository might be kept in sync (the original 
    copy is kept as a remote). A fork is used when the copies are going to be 
    independent.

    Branches are similar: all the files in a repository exist in both branches 
    when a new branch is created, and files may then be changed to different 
    versions between the branches. But two branches exist within the same 
    repository and share a working directory. Branches can be merged together, 
    where clones and forks cannot (at least not with a simple merge command). 
    When a repository is forked or cloned, all branches inside it are copied. 
    Branches are used within the same repository, often to allow independent 
    changes to proceed at the same time, to be merged into one version at a 
    later time.

    Of course, after a repository is forked OR cloned the two copies may be 
    updated separately. We have learned how to keep cloned repositories in 
    sync after they split, using push and pull commands. We don't know yet 
    about whether/how forked copies can be synced.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    It's a local note about how many (and which) changes you have committed 
    since you last synced with the remote. That helps you track where you are 
    in terms of communicating what you are doing with other collaborators or 
    platforms. You can put together a set of commits that form a logically 
    consistent whole "mini-release" and push it out into the world as a unit,
    as a sort of "super-commit."

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    I would probably try to do some change-logging in the comments of my code, 
    which would interrupt the flow of the code and make it harder to read. 
    It's also hard to remember to mark changes when your focus is on fixing a 
    problem, not leaving bread crumbs for future code-archaeologists. 

    I would also have to set up some infrastructure for discussion and for 
    passing around new versions of code files, and for 'reserving' materials 
    that you're working on so that merges can be managed. All that is handled 
    within the git/github architecture. The drawback of roll-your-own anything 
    is that it's hard to build robust and consistent systems, and clearly git 
    has its history of use and improvement working for it. Someone's already 
    faced the issues, worked them through, and worked toward consistency. When 
    someone joins a project, if they already know git (pretty likely at this 
    point), they won't have to learn my idiosyncratic system. Just my 
    idiosyncratic implementation of the git system <grin>.

    Without git, though, I would lose access to old versions of files, unless 
    my project history was saved in full-project copies for each commit (or, 
    more likely, each release). Having a very narrow granularity for commits 
    and therefore for version changes is helpful, as each documented change 
    is likely to have smaller scope, and therefore be easier to understand 
    in retrospect (when archaeology is required). There's also less to examine 
    in the case of a subtle defect.

    It would also take more time without git/github to find and review 
    changes; the system's diff utilities are very helpful.

    The other side, what would be easier? Not much, except that git/github 
    has a lot of complexity and a specific approach, and may be more 
    complicated than some simple undertakings need. But simple undertakings 
    have a way of growing and morphing (remember DOS?), and it's better to 
    have an infrastructure that can scale up. Git's history proves that it 
    can scale up to a pretty big project (eg, linux).

    Mammoth answer. Call me Dostoevsky.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    I would want to make changes in a branch when the changes I'm working on 
    have the possibility of breaking the functionality of the project as a 
    whole. Usually, that applies to a multi-developer project, or to a project 
    that advances a functioning product. 

    In the case of a multideveloper project, I want to complete a set of 
    commits (each of which is an atomic unit of change) that completely 
    implements a functional goal before I merge the change branch back into 
    the master branch. Some elements may need to change a number of times as 
    I complete and test them, and it would be a waste of time forcing others 
    to adapt to "draft" changes until I'm sure they do the job. When they 
    finally do the job, I merge them into the greater work, at which time the 
    rest of the "world" must adapt (through the merge process). 

    The other case - updates to a functioning project - is similar, but without 
    the coordination element. There may be a need in the outside world for the 
    master branch to work effectvely. While I make a change, I run the risk of 
    breaking that integrity. Keeping a fixed commit label, within the chain of 
    master commits, as the version the outside world sees is one way to do 
    that, but the idea is clearer if I split off a branch until my work is 
    stable enough for general release. The master branch is a sort of self-
    documenting high-water-mark for progress.


